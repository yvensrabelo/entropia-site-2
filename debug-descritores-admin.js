// ====================================================================
// DEBUG SCRIPT - Execute no console do navegador na p√°gina admin/dashboard/aulas
// ====================================================================

async function debugDescritoresAdmin() {
  console.clear();
  console.log('üîç INICIANDO DEBUG DE DESCRITORES ADMIN...\n');
  
  // 1. Testar API diretamente
  console.log('üì° 1. TESTANDO API /api/descritores-v2');
  console.log('=====================================');
  
  const hoje = new Date().toISOString().split('T')[0];
  const url = `/api/descritores-v2?admin=true&data=${hoje}`;
  
  try {
    const response = await fetch(url);
    const data = await response.json();
    
    console.log('‚úÖ Status:', response.status);
    console.log('üìä Total de descritores:', data.descritores?.length || 0);
    console.log('üîç Filtros aplicados:', data.filtros_aplicados);
    
    if (data.descritores && data.descritores.length > 0) {
      console.log('\nüìã PRIMEIRO DESCRITOR:');
      console.table(data.descritores[0]);
      
      console.log('\nüîë CAMPOS IMPORTANTES:');
      data.descritores.forEach((desc, idx) => {
        console.log(`Descritor ${idx + 1}:`, {
          id: desc.id,
          horario_id: desc.horario_id,
          data: desc.data,
          professor_id: desc.professor_id,
          descricao_livre: desc.descricao_livre?.substring(0, 50) + '...'
        });
      });
    }
  } catch (error) {
    console.error('‚ùå Erro ao testar API:', error);
  }
  
  // 2. Buscar hor√°rios/aulas
  console.log('\n\nüìö 2. VERIFICANDO ESTRUTURA DE AULAS');
  console.log('=====================================');
  
  // Simular busca de hor√°rios (ajuste conforme necess√°rio)
  try {
    // Se horariosService estiver dispon√≠vel globalmente
    if (typeof horariosService !== 'undefined') {
      const horarios = await horariosService.listarHorarios();
      console.log('‚úÖ Total de hor√°rios:', horarios.length);
      
      if (horarios.length > 0) {
        console.log('\nüéØ PRIMEIRO HOR√ÅRIO/AULA:');
        console.table(horarios[0]);
        
        console.log('\nüîë IDs DOS HOR√ÅRIOS:');
        horarios.slice(0, 5).forEach((h, idx) => {
          console.log(`Hor√°rio ${idx + 1}:`, {
            id: h.id,
            tempo: h.tempo,
            materia: h.materia,
            turma: h.turma,
            professor_id: h.professor_id
          });
        });
      }
    } else {
      console.log('‚ö†Ô∏è  horariosService n√£o est√° dispon√≠vel globalmente');
    }
  } catch (error) {
    console.error('‚ùå Erro ao buscar hor√°rios:', error);
  }
  
  // 3. An√°lise de compatibilidade
  console.log('\n\nüîó 3. AN√ÅLISE DE COMPATIBILIDADE DE IDs');
  console.log('========================================');
  
  console.log(`
PROBLEMAS COMUNS:
1. ‚ùå horario_id do descritor n√£o bate com id da aula
2. ‚ùå Descritor tem professor_id diferente da aula
3. ‚ùå Data do descritor n√£o √© a data selecionada
4. ‚ùå Turma do descritor n√£o √© a turma filtrada

SOLU√á√ÉO:
- Verificar se o descritor est√° sendo salvo com o horario_id correto
- Confirmar que o filtro de data est√° funcionando
- Verificar se n√£o h√° problema de timezone na data
  `);
  
  // 4. Sugest√£o de teste manual
  console.log('\n\nüß™ 4. TESTE MANUAL SUGERIDO');
  console.log('===========================');
  console.log(`
1. Abra a aba Network do DevTools
2. Recarregue a p√°gina
3. Procure pela requisi√ß√£o para /api/descritores-v2
4. Verifique:
   - Query parameters enviados
   - Response retornada
   - Se h√° descritores no array

5. No console, verifique os logs:
   - [DEBUG AULAS] Aulas carregadas
   - [DEBUG DESCRITORES] Estrutura completa
   - [DEBUG FINAL] Compara√ß√£o IDs
  `);
}

// Executar automaticamente
debugDescritoresAdmin();

// Para executar novamente:
// debugDescritoresAdmin()